# using official python image
FROM python:3.10

LABEL maintainer="Ganesh Prasad <ganesh.p@finbox.in>"

# setup image dependecies
RUN apt-get update && apt-get install --no-install-recommends ffmpeg \
    libsm6 libxext6 poppler-utils libleptonica-dev tesseract-ocr \
    libtesseract-dev python3-pil tesseract-ocr-eng tesseract-ocr-script-latn -y

# moved these variables here because it helps in optimizing dockerfile
ENV HOME /
ENV APP_HOME /bank_connect_apis
ENV LOG_DIR /bank_connect_apis/log

# upgrade pip
RUN pip install --upgrade pip

# set the working directory
WORKDIR ${APP_HOME}

# copy requirements.txt
COPY requirements.txt .

# installing dependencies
RUN pip install -r requirements.txt

# setting required environment variables
ENV PYTHONUNBUFFERED 1
ENV PYTHONDONTWRITEBYTECODE 1

ENV STAGE ${STAGE}
ENV AWS_REGION ${AWS_REGION}
ENV LATEST_COMMIT_HASH ${LATEST_COMMIT_HASH}
ENV BANK_CONNECT_APIS_PG_DBNAME ${BANK_CONNECT_APIS_PG_DBNAME}
ENV BANK_CONNECT_APIS_PG_USER ${BANK_CONNECT_APIS_PG_USER}
ENV BANK_CONNECT_APIS_PG_PASSWORD ${BANK_CONNECT_APIS_PG_PASSWORD}
ENV BANK_CONNECT_APIS_PG_HOST_URL ${BANK_CONNECT_APIS_PG_HOST_URL}
ENV BANK_CONNECT_APIS_PG_PORT ${BANK_CONNECT_APIS_PG_PORT}
ENV BANK_CONNECT_APIS_REDIS_HOST ${BANK_CONNECT_APIS_REDIS_HOST}
ENV BANK_CONNECT_APIS_REDIS_PORT ${BANK_CONNECT_APIS_REDIS_PORT}
ENV BANK_CONNECT_APIS_REDIS_SSL_ENABLED ${BANK_CONNECT_APIS_REDIS_SSL_ENABLED}
ENV ENABLE_SENTRY ${ENABLE_SENTRY}
ENV SENTRY_DSN ${SENTRY_DSN}
ENV SENTRY_TRACES_SAMPLE_RATE ${SENTRY_TRACES_SAMPLE_RATE}
ENV SENTRY_SAMPLE_RATE ${SENTRY_SAMPLE_RATE}
ENV BANK_CONNECT_UPLOADS_BUCKET ${BANK_CONNECT_UPLOADS_BUCKET}
ENV BANK_CONNECT_UPLOADS_REPLICA_BUCKET ${BANK_CONNECT_UPLOADS_REPLICA_BUCKET}
ENV BANK_CONNECT_IDENTITY_DDB_TABLE_NAME ${BANK_CONNECT_IDENTITY_DDB_TABLE_NAME}
ENV BANK_CONNECT_TMP_IDENTITY_DDB_TABLE_NAME ${BANK_CONNECT_TMP_IDENTITY_DDB_TABLE_NAME}
ENV BANK_CONNECT_ACCOUNT_DDB_TABLE_NAME ${BANK_CONNECT_ACCOUNT_DDB_TABLE_NAME}
ENV ACCESS_LAMBDA ${ACCESS_LAMBDA}
ENV BANK_CONNECT_REPORTS_BUCKET ${BANK_CONNECT_REPORTS_BUCKET}
ENV BANK_CONNECT_DUMP_BUCKET ${BANK_CONNECT_DUMP_BUCKET}
ENV SYNC_IDENTITY_LAMBDA ${SYNC_IDENTITY_LAMBDA}
ENV SYNC_IDENTITY_LAMBDA_FINVU_AA ${SYNC_IDENTITY_LAMBDA_FINVU_AA}
ENV ANALYZE_TRANSACTIONS_LAMBDA_FINVU_AA ${ANALYZE_TRANSACTIONS_LAMBDA_FINVU_AA}
ENV NEW_BANK_REQUEST_PDF_BUCKET ${NEW_BANK_REQUEST_PDF_BUCKET}
ENV PDF_PAGES_HASH_GENERATION_TASKS_QUEUE_URL ${PDF_PAGES_HASH_GENERATION_TASKS_QUEUE_URL}
ENV PERFIOS_PDF_UPLOAD_TO_BC_SQS_URL ${PERFIOS_PDF_UPLOAD_TO_BC_SQS_URL}
ENV PARSE_PERFIOS_XML_REPORT_LAMBDA ${PARSE_PERFIOS_XML_REPORT_LAMBDA}
ENV FINVU_AA_REQUEST_STATUS_POLLING_JOBS_QUEUE_URL ${FINVU_AA_REQUEST_STATUS_POLLING_JOBS_QUEUE_URL}
ENV QUALITY_QUEUE_URL ${QUALITY_QUEUE_URL}
ENV SETUP_EXPLICIT_AWS_CREDS ${SETUP_EXPLICIT_AWS_CREDS}
ENV AWS_ACCESS_KEY_ID ${AWS_ACCESS_KEY_ID}
ENV AWS_SECRET_ACCESS_KEY ${AWS_SECRET_ACCESS_KEY}
ENV BANK_CONNECT_QUALITY_SUPERUSER_TOKEN ${BANK_CONNECT_QUALITY_SUPERUSER_TOKEN}
ENV BANK_CONNECT_STATEMENT_DDB_TABLE_NAME ${BANK_CONNECT_STATEMENT_DDB_TABLE_NAME}
ENV BANK_CONNECT_ENRICHMENTS_DDB_TABLE_NAME ${BANK_CONNECT_ENRICHMENTS_DDB_TABLE_NAME}
ENV LINK_ID_PROGRESS_LAMBDA_FUNCTION_NAME ${LINK_ID_PROGRESS_LAMBDA_FUNCTION_NAME}
ENV RAW_EXCEL_REPORT_LAMBDA_FUNCTION_NAME ${RAW_EXCEL_REPORT_LAMBDA_FUNCTION_NAME}
ENV XLSX_EXCEL_REPORT_LAMBDA_FUNCTION_NAME ${XLSX_EXCEL_REPORT_LAMBDA_FUNCTION_NAME}
ENV AGGREGATE_XLSX_EXCEL_REPORT_LAMBDA_FUNCTION_NAME ${AGGREGATE_XLSX_EXCEL_REPORT_LAMBDA_FUNCTION_NAME}
ENV XML_REPORT_LAMBDA_FUNCTION_NAME ${XML_REPORT_LAMBDA_FUNCTION_NAME}
ENV ENRICHMENTS_PREDICTORS_LAMBDA_FUNCTION_NAME ${ENRICHMENTS_PREDICTORS_LAMBDA_FUNCTION_NAME}
ENV ENRICHMENTS_ENTITY_PREDICTORS_LAMBDA_FUNCTION_NAME ${ENRICHMENTS_ENTITY_PREDICTORS_LAMBDA_FUNCTION_NAME}
ENV ENRICHMENTS_EOD_LAMBDA_FUNCTION_NAME ${ENRICHMENTS_EOD_LAMBDA_FUNCTION_NAME}
ENV ENRICHMENTS_MONTHLY_ANALYSIS_LAMBDA_FUNCTION_NAME ${ENRICHMENTS_MONTHLY_ANALYSIS_LAMBDA_FUNCTION_NAME}
ENV IIFL_FRAUD_FLOW_LAMBDA_FUNCTION_NAME ${IIFL_FRAUD_FLOW_LAMBDA_FUNCTION_NAME}
ENV ANALYZE_PDF_LAMBDA_FUNCTION_NAME ${ANALYZE_PDF_LAMBDA_FUNCTION_NAME}
ENV METADATA_FRAUDS_LAMBDA_FUNCTION_NAME ${METADATA_FRAUDS_LAMBDA_FUNCTION_NAME}
ENV BC_SCORE_LAMBDA_FUNCTION_NAME ${BC_SCORE_LAMBDA_FUNCTION_NAME}
ENV BC_INCOME_LAMBDA_FUNCTION_NAME ${BC_INCOME_LAMBDA_FUNCTION_NAME}
ENV BC_P_MAPPING_LAMBDA_FUNCTION_NAME ${BC_P_MAPPING_LAMBDA_FUNCTION_NAME}
ENV UPDATE_STATE_FAN_OUT_LAMBDA_FUNCTION_NAME ${UPDATE_STATE_FAN_OUT_LAMBDA_FUNCTION_NAME}
ENV BANK_CONNECT_CACHEBOX_BUCKET ${BANK_CONNECT_CACHEBOX_BUCKET}
ENV ACCOUNT_MIGRATION_DATE ${ACCOUNT_MIGRATION_DATE}
ENV ACCOUNT_MIGRATION_LAMBDA_FUNCTION_NAME ${ACCOUNT_MIGRATION_LAMBDA_FUNCTION_NAME}
ENV BANK_CONNECT_CLIENT_SESSION_URL ${BANK_CONNECT_CLIENT_SESSION_URL}
ENV BANK_CONNECT_API_LOGGING_QUEUE_URL ${BANK_CONNECT_API_LOGGING_QUEUE_URL}
ENV BANK_CONNECT_API_LOGGING_FIREHOSE_STREAM_NAME ${BANK_CONNECT_API_LOGGING_FIREHOSE_STREAM_NAME}
ENV BANK_CONNECT_ENRICHMENTS_BUCKET ${BANK_CONNECT_ENRICHMENTS_BUCKET}
ENV SESSION_EXPIRY_SQS_QUEUE_URL ${SESSION_EXPIRY_SQS_QUEUE_URL}
ENV BANK_CONNECT_DASHBOARD_URL ${BANK_CONNECT_DASHBOARD_URL}
ENV SENDGRID_API_KEY ${SENDGRID_API_KEY}
ENV BANK_CONNECT_DOC_LINK ${BANK_CONNECT_DOC_LINK}
ENV BANK_CONNECT_POSTMAN_LINK ${BANK_CONNECT_POSTMAN_LINK}

# DataDog related configs
ENV SETUP_DATADOG ${SETUP_DATADOG}
ENV DD_SERVICE ${DD_SERVICE}
ENV DD_ENV ${DD_ENV}
ENV DD_VERSION ${DD_VERSION}
ENV DD_PROFILING_ENABLED ${DD_PROFILING_ENABLED}
ENV DD_RUNTIME_METRICS_ENABLED ${DD_RUNTIME_METRICS_ENABLED}
ENV DD_AGENT_HOST ${DD_AGENT_HOST}

# CloudWatch related configuration
ENV CLOUDWATCH_LOGGING_LOG_GROUP ${CLOUDWATCH_LOGGING_LOG_GROUP}
ENV CLOUDWATCH_LOGGING_MINIMUM_LEVEL ${CLOUDWATCH_LOGGING_MINIMUM_LEVEL}

# FIU MODULE BASE URL
ENV FIU_MODULE_BASE_URL ${FIU_MODULE_BASE_URL}
ENV FIU_MODULE_AUTHORIZATION_KEY ${FIU_MODULE_AUTHORIZATION_KEY}

ENV BLUE_GREEN_ENABLED=false
ENV BLUE_GREEN_PERCENTAGE_VALUE=0

# KAFKA
ENV KAFKA_BROKER_URL=${KAFKA_BROKER_URL}

ENV TCAP_ORGANIZATION_ID ${TCAP_ORGANIZATION_ID}

#Django settings module
ENV DJANGO_SETTINGS_MODULE=config.settings

LABEL com.datadoghq.tags.service=${DD_SERVICE}
LABEL com.datadoghq.tags.env=${DD_ENV}
LABEL com.datadoghq.tags.version=${DD_VERSION}

# set default region for aws
COPY docker/aws_config /.aws/config

# creating logs directory
RUN mkdir -p ${LOG_DIR}

# copy the code
COPY . ${APP_HOME}
COPY bank_connect_kafka_consumers /${APP_HOME}/bank_connect_kafka_consumers

CMD ["sh", "-c", "python bank_connect_kafka_consumers/consumer_startup.py"]